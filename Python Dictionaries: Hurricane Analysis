# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
def convert_damages_data(damages):
  
  conversion = {"M": 1000000, "B": 1000000000}
  updated_damages = []

  for damage in damages:
    if damage == "Damages not recorded":
      updated_damages.append(damage)
    if damage[-1] == 'M':
      updated_damages.append(float(damage.strip('M'))*conversion["M"])
    if damage[-1] == 'B':
      updated_damages.append(float(damage.strip('B'))*conversion["B"])

  return updated_damages

updated_damages = convert_damages_data(damages)
print(updated_damages)
# test function by updating damages


# 2 
# Create and view the hurricanes dictionary
hurricanes = {}

def construct_hurricanes_dict(names, months, years, max_sustained_winds, areas_affected, damages, deaths):

  for i in range(len(names)):
    hurricanes[names[i]] = {'Name': names[i],'Month': months[i], 'Year': years[i],'Max Sustained Wind': max_sustained_winds[i],'Areas Affected':areas_affected[i],'Damage':damages[i],'Death':deaths[i]}

  return hurricanes

print(construct_hurricanes_dict(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths))
print(hurricanes["Carol"])

# 3
# Organizing by Year
def hurricane_by_year_dict(year):
    hurricane_by_year = []
    for name in hurricanes:
        if hurricanes[name]['Year'] == year:
            hurricane_by_year.append(hurricanes[name])
    return hurricane_by_year

print(hurricane_by_year_dict(1924))
print(hurricane_by_year_dict(2017))
# create a new dictionary of hurricanes with year and key


# 4
# Counting Damaged Areas
areas_affected = {}
def count_affected_areas(hurricanes):
    for name in hurricanes:
        for area in hurricanes[name]['Areas Affected']:
            if area in areas_affected:
                areas_affected[area] += 1
            else:
                areas_affected[area] = 1
    return areas_affected
print(count_affected_areas(hurricanes))

# create dictionary of areas to store the number of hurricanes involved in


# 5 
# Calculating Maximum Hurricane Count
def most_affected_area(hurricanes):
    values = sorted(list(hurricanes.values()), reverse=True)
    for area in hurricanes.keys():
        if values[0] == hurricanes[area]:
            return area, hurricanes[area]


print(most_affected_area(areas_affected))

# find most frequently affected area and the number of hurricanes involved in


# 6
# Calculating the Deadliest Hurricane
def greatest_num_deaths(hurricanes):
    max_death = 0
    hurricane_name = ''
    for name in hurricanes:
        if hurricanes[name]['Death'] > max_death:
            max_death = hurricanes[name]['Death']
            hurricane_name = name
    return hurricane_name, max_death

print(greatest_num_deaths(hurricanes))
# find highest mortality hurricane and the number of deaths

# 7
# Rating Hurricanes by Mortality
mortality_rates = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
def mortality(hurricanes):
    mortality_scale = {0: 0,
                       1: 100,
                       2: 500,
                       3: 1000,
                       4: 10000}
    for name in hurricanes:
        if hurricanes[name]['Death'] == mortality_scale[0]:
            mortality_rates[0] = name
        elif mortality_scale[0] < hurricanes[name]['Death'] <= mortality_scale[1]:
            mortality_rates[1].append(name)
        elif mortality_scale[1] < hurricanes[name]['Death'] <= mortality_scale[2]:
            mortality_rates[2].append(name)
        elif mortality_scale[2] < hurricanes[name]['Death'] <= mortality_scale[3]:
            mortality_rates[3].append(name)
        elif mortality_scale[3] < hurricanes[name]['Death'] <= mortality_scale[4]:
            mortality_rates[4].append(name)
        else:
            mortality_rates[5].append(name)
    return mortality_rates

        
print(mortality(hurricanes))  


# 8 Calculating Hurricane Maximum Damage
def greatest_damage(hurricanes):
    damages_list = []
    for name in hurricanes:
        if hurricanes[name]['Damage'] != 'Damages not recorded':
            damages_list.append(hurricanes[name]['Damage'])

    greatest_damage = max(damages_list)

    for name in hurricanes:
        if hurricanes[name]['Damage'] == greatest_damage:
            return name, greatest_damage


print(greatest_damage(hurricanes))



# 9
# Rating Hurricanes by Damage
damage_rates = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}

def damage(hurricanes):

  damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}

  for name in hurricanes:
        if hurricanes[name]['Damage'] == 'Damages not recorded':
            damage_rates[0].append(name)
        elif damage_scale[0] < hurricanes[name]['Damage'] <= damage_scale[1]:
            damage_rates[1].append(name)
        elif damage_scale[1] < hurricanes[name]['Damage'] <= damage_scale[2]:
            damage_rates[2].append(name)
        elif damage_scale[2] < hurricanes[name]['Damage'] <= damage_scale[3]:
            damage_rates[3].append(name)
        elif damage_scale[3] < hurricanes[name]['Death'] <= damage_scale[4]:
            damage_rates[4].append(name)
        else:
            damage_rates[5].append(name)
  return damage_rates


print(damage(hurricanes))
